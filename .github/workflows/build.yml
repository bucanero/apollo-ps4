name: Build package

on: [ push, pull_request, workflow_dispatch ]

jobs:
  build_pkg:
    runs-on: ubuntu-20.04
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Checkout dbglogger
      uses: actions/checkout@v3
      with:
        repository: bucanero/dbglogger
        path: dbglogger

    - name: Checkout apollo-lib
      uses: actions/checkout@v3
      with:
        repository: bucanero/apollo-lib
        path: apollo-lib

    - name: Checkout zip
      uses: actions/checkout@v3
      with:
        repository: bucanero/zip
        path: zip

    - name: Checkout oosdk_libraries
      uses: actions/checkout@v3
      with:
        repository: bucanero/oosdk_libraries
        path: oosdk_libraries

    - name: Checkout SDL-PS4
      uses: actions/checkout@v3
      with:
        repository: bucanero/SDL-PS4
        path: SDL-PS4
        ref: ps4

    - name: Checkout mxml
      uses: actions/checkout@v3
      with:
        repository: bucanero/mxml
        path: mxml

    - name: Checkout libunrar
      uses: actions/checkout@v3
      with:
        repository: bucanero/libunrar-ps3
        path: libunrar-ps3

    - name: Checkout libun7zip
      uses: actions/checkout@v3
      with:
        repository: bucanero/libun7zip
        path: libun7zip

    - name: Checkout libjbc
      uses: actions/checkout@v3
      with:
        repository: bucanero/ps4-libjbc
        path: ps4-libjbc

    - name: Set env vars
      id: slug
      run: |
        echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
        echo "pkg_file=IV0000-APOL00004_00-APOLLO0000000PS4.pkg" >> $GITHUB_ENV
        echo "llvm_ver=12.0" >> $GITHUB_ENV

      # temporary release until 0.53 is released
    - name: Download OpenOrbis Toolchain
      run: |
        curl -sL https://github.com/illusion0001/OpenOrbis-PS4-Toolchain/releases/download/0.0.1.416/toolchain.tar.gz | tar xvz -C ./
        echo "OO_PS4_TOOLCHAIN=${GITHUB_WORKSPACE}/OpenOrbis/PS4Toolchain" >> $GITHUB_ENV
        cp oosdk_libraries/build_rules.mk OpenOrbis/PS4Toolchain/build_rules.mk

    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v3
      with:
        path: ./llvm
        key: llvm-${{ env.llvm_ver }}

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: ${{ env.llvm_ver }}
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

    - name: Install zlib
      working-directory: oosdk_libraries/zlib_partial
      run: |
        make install

    - name: Install polarssl
      working-directory: oosdk_libraries/polarssl-1.3.9
      run: |
        make install

    - name: Install zip
      working-directory: zip
      run: |
        make install

    - name: Install dbglogger
      working-directory: dbglogger
      run: |
        make -f Makefile.PS4 install

    - name: Install apollo-lib
      working-directory: apollo-lib
      run: |
        make -f Makefile.PS4 install

    - name: Install libun7zip
      working-directory: libun7zip
      run: |
        make -f Makefile.PS4 install

    - name: Install libunrar-ps3
      working-directory: libunrar-ps3
      run: |
        make -f Makefile.PS4 install

    - name: Install mini xml
      working-directory: mxml/ps4
      run: |
        make install

    - name: Install libjbc
      working-directory: ps4-libjbc
      run: |
        make install

    - name: Install SDL2 library
      working-directory: SDL-PS4
      run: |
        mkdir orbis && cd orbis
        cmake --toolchain ../cmake/openorbis.cmake ..
        make
        cp libSDL2.a "${OO_PS4_TOOLCHAIN}/lib"

    - name: Install libcurl library
      working-directory: oosdk_libraries/curl-7.64.1
      run: |
        mkdir orbis && cd orbis
        cmake --toolchain ../../../SDL-PS4/cmake/openorbis.cmake .. -DCMAKE_USE_POLARSSL=1 -DUSE_UNIX_SOCKETS=0 -DENABLE_THREADED_RESOLVER=0 -DENABLE_IPV6=0
        make libcurl
        cp lib/libcurl.a "${OO_PS4_TOOLCHAIN}/lib"
        cp -R ../include/curl "${OO_PS4_TOOLCHAIN}/include/"

    - name: Build Apollo App Package
      run: |
        make createzip
        make

    - name: Push package artifact
      uses: actions/upload-artifact@v3
      with:
        name: apollo-ps4-build_${{ steps.slug.outputs.sha8 }}
        path: ${{ env.pkg_file }}
        if-no-files-found: error
        retention-days: 7 # don't keep artifacts for too long
